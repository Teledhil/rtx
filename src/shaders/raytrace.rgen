#version 460
#extension GL_NV_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_control_flow_attributes: require

#include "ray_common.glsl"

// Top-Level Acceleration Structure.
layout(binding = 0, set = 0) uniform accelerationStructureNV tlas;

// Result image.
layout(binding = 1, set = 0, rgba32f) uniform image2D image;

// Uniform buffer / Camera.
layout(binding = 0, set = 1) uniform cameraProperties {
    mat4 mvp;
    mat4 inverse_view;
    mat4 inverse_projection;
} cam;

// Out
layout(location = 0) rayPayloadNV hitPayload ray_payload;

// RT constants.
// TODO: Move to ray_common.glsl
layout(push_constant) uniform Constants {
  vec4 clear_color;
  vec3 light_position;
  float light_intensity;
  int light_type;
  int frame;
  int samples;
  int max_iterations;
} constants;

#include "random.glsl"

void main()
{

  // Initialize random seed.
  uint seed = tea(gl_LaunchIDNV.y * gl_LaunchSizeNV.x + gl_LaunchIDNV.x, constants.frame);

  vec3 hit_values = vec3(0);

  //const int NUM_SAMPLES = constants.samples;
  for(int samples = 0; samples < constants.samples; samples++) {
    // Subpixel jitter.
    // Frame 0: ray goes through the center of the pixel.
    // Other frames: ray goes through random offset.
    float r1 = random_float(seed);
    float r2 = random_float(seed);
    vec2 subpixel_jitter = constants.frame == 0 ? vec2(0.5) : vec2(r1, r2);

    // gl_LaunchIDNV contains integer coordinates of the pixel.
    const vec2 pixel_center = vec2(gl_LaunchIDNV.xy) + subpixel_jitter;

    // gl_LaunchSizeNV provides the image size.
    // Get pixel coordinates in range [0, 1] x [0, 1].
    const vec2 in_uv = pixel_center / vec2(gl_LaunchSizeNV.xy);

    vec2 d = in_uv * 2.0 - 1.0;

    // Ray origin.
    vec4 origin = cam.inverse_view * vec4(0, 0, 0, 1);

    // Ray travels perpendicular to screen.
    vec4 target = cam.inverse_projection * vec4(d.x, d.y, 1, 1);

    // Ray gets farther from the screen.
    vec4 direction = cam.inverse_view * vec4(normalize(target.xyz), 0);

    // Make all objects opaque.
    const uint ray_flags = gl_RayFlagsOpaqueNV;

    // Rendering distance range.
    float t_min     = 0.001;
    float t_max     = 10000.0;

    // Init ray payload
    ray_payload.hit_value = vec3(0);
    ray_payload.attenuation = vec3(1.0, 1.0, 1.0);
    ray_payload.done = 1;
    ray_payload.depth = 0;
    ray_payload.ray_origin = origin.xyz;
    ray_payload.ray_direction = direction.xyz;


    for(;;) {
      traceNV(tlas,           // acceleration structure
              ray_flags,      // rayFlags
              0xFF,           // cullMask
              0,              // sbtRecordOffset
              0,              // sbtRecordStride
              0,              // missIndex
              ray_payload.ray_origin,
              t_min,          // ray min range
              ray_payload.ray_direction,
              t_max,          // ray max range
              0               // payload (location = 0)
      );

      hit_values += ray_payload.hit_value * ray_payload.attenuation;

      ray_payload.depth++;

      if (ray_payload.done == 1 || ray_payload.depth >= constants.max_iterations) {
        break;
      }

      ray_payload.done = 1;
    }
  }

  //vec3 pixel_color = ray_payload.hit_value;
  vec3 pixel_color = hit_values / constants.samples;

  // Gamma correction
  // pixel_color = sqrt(pixel_color);

  if (constants.frame > 0) {
    // Extra frames, accumulate.
    float a = 1.0f / float(constants.frame + 1);
    vec3 old_pixel_color = imageLoad(image, ivec2(gl_LaunchIDNV.xy)).xyz;
    imageStore(image, ivec2(gl_LaunchIDNV.xy), vec4(mix(old_pixel_color, pixel_color, a), 1.0));
  } else {
    // First frame, overwrite accumulation buffer.
    imageStore(image, ivec2(gl_LaunchIDNV.xy), vec4(pixel_color, 1.0));
  }

  // Purple RTX
  //
  //imageStore(image, ivec2(gl_LaunchIDNV.xy), vec4(0.5, 0.0, 0.5, 1.0));
}
